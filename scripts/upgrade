#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_extra_apt_repos__3
source ynh_install_php__3
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get "$app" domain)
path_url=$(ynh_app_setting_get "$app" path)
admin=$(ynh_app_setting_get "$app" admin)
is_public=$(ynh_app_setting_get "$app" is_public)
final_path=$(ynh_app_setting_get "$app" final_path)
language=$(ynh_app_setting_get "$app" language)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set "$app" is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set "$app" is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set "$app" db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path="/var/www/$app"
	ynh_app_setting_set "$app" final_path "$final_path"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..." --time --weight=1

# Download, check integrity, uncompress and patch the source from app-upgrade.src
ynh_setup_source "$final_path" "app-upgrade"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config "phpversion"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --time --weight=1

ynh_install_php --phpversion="$phpversion" --package="$pkg_dependencies"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --time --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create "$app"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --time --weight=1

# Create a dedicated php-fpm config
ynh_add_fpm_config --phpversion="$phpversion"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R "$app": "$final_path"

#=================================================
# INSTALL LDAP PLUGIN
#=================================================

pushd "$final_path"
        exec_as $app "php$phpversion bin/gpm install login-ldap -y"
        exec_as $app "mkdir -p user/config/plugins"
        exec_as $app "touch user/accounts/admin.yaml"
popd

ynh_secure_remove "$final_path/user/plugins/login-ldap/login-ldap.yaml"
exec_as $app cp ../conf/login-ldap.yaml "$final_path/user/plugins/login-ldap/login-ldap.yaml"
ynh_replace_string "__ADMIN__" "$admin" "$final_path/user/plugins/login-ldap/login-ldap.yaml"
ynh_replace_string "__APP__" "$app" "$final_path/user/plugins/login-ldap/login-ldap.yaml"
exec_as $app cp "$final_path/user/plugins/login-ldap/login-ldap.yaml" "$final_path/user/config/plugins/login-ldap.yaml"

#=================================================
# SETUP PERMISSIONS
#=================================================
ynh_script_progression --message="Configuring permissions..." --time --weight=1

# Make app public if necessary
if [ "$is_public" -eq "1" ]
then
        ynh_permission_update -p "main" -r "all_users" -a "visitors"
fi


# Giving admin permission to the specified used
$(ynh_permission_create -p "admin" -a "$admin") || $(ynh_permission_update -p "admin" -a "$admin") || true

# Creating user permission
$(ynh_permission_create -p "user") || true


#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

systemctl reload nginx

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --time --last
